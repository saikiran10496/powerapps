name: Deploy Power Platform Solution1
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Install Power Platform CLI
      shell: pwsh
      run: |
        # Create directory for solutions
        New-Item -ItemType Directory -Force -Path "exportedSolutions"
        
        # Download and install the Power Platform CLI
        Invoke-WebRequest -Uri https://aka.ms/PowerAppsCLI -OutFile PowerAppsCLI.msi
        Start-Process msiexec.exe -ArgumentList '/i PowerAppsCLI.msi /quiet /norestart' -Wait
        
        # Refresh environment variables
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        
        # Install through .NET tool as a more reliable alternative
        dotnet tool install -g Microsoft.PowerApps.CLI.Tool
        
        # Verify installation
        Get-Command pactt -ErrorAction SilentlyContinue
        if ($?) {
            Write-Host "pac tool installed via .NET global tool"
            echo "PAC_COMMAND=pactt" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
            Write-Host "Checking for pac.exe from MSI install"
            $pacPath = "C:\Program Files (x86)\Microsoft\Power Platform CLI\pac.exe"
            if (Test-Path $pacPath) {
                Write-Host "Found pac.exe at standard location"
                echo "PAC_COMMAND=$pacPath" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
                Write-Error "Could not find pac command. Installation may have failed."
                exit 1
            }
        }
        
    - name: Export Solution from Source Environment
      shell: pwsh
      run: |
        # Display the command we're using
        Write-Host "Using PAC command: $env:PAC_COMMAND"
        
        # Authenticate with source environment
        & $env:PAC_COMMAND auth create --applicationId "${{ secrets.CLIENT_ID }}" --tenant "${{ secrets.TENANT_ID }}" --clientSecret "${{ secrets.CLIENT_SECRET }}" --url "https://org9df2a3ac.crm.dynamics.com"
        if (-not $?) {
            Write-Error "Authentication with source environment failed"
            exit 1
        }
        
        # List solutions to verify connection and see if sol1 exists
        & $env:PAC_COMMAND solution list
        
        # Export solution - note we need to specify the full output path including filename
        & $env:PAC_COMMAND solution export --name "sol1" --path "./exportedSolutions/sol1_unmanaged.zip" --managed false
        if (-not $?) {
            Write-Error "Solution export failed"
            exit 1
        }
        
        # Verify the file was created
        if (-not (Test-Path "./exportedSolutions/sol1_unmanaged.zip")) {
            Write-Error "Solution file was not created at ./exportedSolutions/sol1_unmanaged.zip"
            # List the contents of the directory to see what was created
            Get-ChildItem -Path "./exportedSolutions" -Recurse
            exit 1
        }
        
    - name: Import Solution to Target Environment
      shell: pwsh
      run: |
        # Display the command we're using
        Write-Host "Using PAC command: $env:PAC_COMMAND"
        
        # Authenticate with target environment
        & $env:PAC_COMMAND auth create --applicationId "${{ secrets.CLIENT_ID }}" --tenant "${{ secrets.TENANT_ID }}" --clientSecret "${{ secrets.CLIENT_SECRET }}" --url "https://org4174b73a.crm.dynamics.com"
        if (-not $?) {
            Write-Error "Authentication with target environment failed"
            exit 1
        }
        
        # Verify the solution file exists before attempting import
        if (Test-Path "./exportedSolutions/sol1_unmanaged.zip") {
            Write-Host "Solution file found. Proceeding with import."
            
            # Import solution
            & $env:PAC_COMMAND solution import --path "./exportedSolutions/sol1_unmanaged.zip" --async false --publish-changes
            if (-not $?) {
                Write-Error "Solution import failed"
                exit 1
            }
        } else {
            Write-Error "Solution file not found at ./exportedSolutions/sol1_unmanaged.zip"
            Get-ChildItem -Path "./" -Recurse | Where-Object { $_.Name -like "*sol1*" }
            exit 1
        }
